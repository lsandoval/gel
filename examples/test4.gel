
(define (draw-polygon circumference vertices)
    (let (
        (side (/ circumference vertices))
        (angle (/ 360 vertices))
        )
        (let iterate (
            (i 0)
            )
            (if (< i vertices)
                (begin
                    (print "move " side)
                    (print "turn " angle)
                    (iterate (+ i 1))
                )
            )
        )
    )
)

(draw-polygon 120 4)


(define (generate-primes)
    (define primes (array))
    (define candidate 2)

    (define (none-prime predicate)
        (= (find primes predicate) -1)
    )

    (define (can-divide-candidate i)
        (= (% candidate i) 0)
    )

    (lambda ()
        (define calculating #t)
        (while calculating
            (if (none-prime can-divide-candidate)
                (begin
                    (append primes candidate)
                    (define result candidate)
                    (set! calculating #f)
                )
            )
            (set! candidate (+ candidate 1))
        )
        result
    )
)

(define next-prime (generate-primes))

(for i (range 1 12)
    (print "Primes(" i ") = " (next-prime))
)


(quit)

