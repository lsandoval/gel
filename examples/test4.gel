
(def (generate-primes)
    (def primes (array))
    (def candidate 2)

    (def (none-prime predicate)
        (= (find primes predicate) -1)
    )

    (def (can-divide-candidate i)
        (= (% candidate i) 0)
    )

    (closure ()
        (def calculated-prime 0)
        (while (= calculated-prime 0)
            (if (none-prime can-divide-candidate)
                (begin
                    (array-append! primes candidate)
                    (set! calculated-prime candidate)
                )
            )
            (set! candidate (+ candidate 1))
        )
        calculated-prime
    )
)

(def next-prime (generate-primes))

(for i (range 1 12)
    (print "Primes(" i ") = " (next-prime))
)


(quit)

