
(define (primes-lesser-than top)
    (define primes (array 2))
    (define n 3)
    (define (cannot-divide-n i)
        (% n i)
    )
    (while (< n top)
        (when (all cannot-divide-n primes)
            (append primes n)
        )
        (set! n (+ n 2))
    )
    primes
)

(define first-primes (primes-lesser-than 100))

(for iter first-primes
    (display "Primes(" (index first-primes iter) ") = " iter)
    (newline)
)

(display "The first prime is " (nth first-primes 0))
(newline)
(display "The last prime is " (nth first-primes -1))
(newline)


(define (factorial n)
    (if (<= n 0)
        1
        (* n (factorial (- n 1)))
    )
)

(define n 10)
(display "Factorial of " n " is " (factorial n))
(newline)
(display n " is " (if (= (% n 2) 0) "even" "odd"))
(newline)

(define (fibonacci n)
    (cond
        ((= n 0)
            0
        )
        ((= n 1)
            1
        )
        (#t
            (+ (fibonacci (- n 1))
               (fibonacci (- n 2))
            )
        )
    )
)

(for i (range 10 0)
    (display "Fibonacci(" i ") = " (fibonacci i))
    (newline)
)


(quit)

