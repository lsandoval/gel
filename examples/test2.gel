
(define (primes-lesser-than top)
    (define sieve (array 2))
    (define n 3)
    (define (remains i)
        (% n i)
    )
    (while (< n top)
        (when (all remains sieve)
            (append sieve n)
        )
        (= n (+ n 2))
    )
    sieve
)

(define first-primes (primes-lesser-than 100))

(for iter first-primes
    (print "Primes(" (index first-primes iter) ") = " iter)
)

(print "The first prime is " (nth first-primes 0))
(print "The last prime is " (nth first-primes -1))


(define (factorial n)
    (cond
        ((<= n 0)
            1
        )
        ((> n 0)
            (* n (factorial (- n 1)))
        )
    )
)

(define n 10)
(print "Factorial of " n " is " (factorial n))
(print n " is " (if (== (% n 2) 0) "even" "odd"))

(define (fibonacci n)
    (case n
        0 0
        1 1
          (+ (fibonacci (- n 1)) (fibonacci (- n 2)))
    )
)

(for i (range 10 0)
    (print "Fibonacci(" i ") = " (fibonacci i))
)


(quit)

