
(define (none-of ls predicate)
    (= (find ls predicate) -1)
)

(define (index ls value)
    (find ls (lambda (i) (= i value)))
)

(define (primes-lesser-than top)
    (define primes (array 2))
    (define n 3)
    (define (can-divide-n i)
        (= (% n i) 0)
    )
    (while (< n top)
        (if (none-of primes can-divide-n )
            (array-append! primes n)
        )
        (set! n (+ n 2))
    )
    primes
)

(define first-primes (primes-lesser-than 100))

(for iter first-primes
    (print "Primes(" (index first-primes iter) ") = " iter)
)

(define (first-of ls)
    (array-get ls 0)
)

(define (last-of ls)
    (array-get ls (- (array-length ls) 1))
)

(print "The first prime is " (first-of first-primes))
(print "The last prime is " (last-of first-primes))


(define (factorial n)
    (if (<= n 0)
        1
        (* n (factorial (- n 1)))
    )
)

(define n 10)
(print "Factorial of " n " is " (factorial n))
(print n " is " (if (= (% n 2) 0) "even" "odd"))

(define (fibonacci n)
    (cond
        ((= n 0)
            0
        )
        ((= n 1)
            1
        )
        (else
            (+ (fibonacci (- n 1))
               (fibonacci (- n 2))
            )
        )
    )
)

(for i (range 10 0)
    (print "Fibonacci(" i ") = " (fibonacci i))
)


(quit)

