
(def (primes-lesser-than top)
    (def primes (array 2))
    (def n 3)
    (def (can-divide-n i)
        (= (% n i) 0)
    )
    (def (none-prime predicate)
        (= (find primes predicate) -1)
    )
    (while (< n top)
        (if (none-prime can-divide-n )
            (array-append! primes n)
        )
        (set! n (+ n 2))
    )
    primes
)

(def primes (primes-lesser-than 100))

(def (index-of value values)
    (def (equal-to-value i) (= i value))
    (find values equal-to-value)
)

(for iter primes
    (print "Primes(" (index-of iter primes) ") = " iter)
)


(print "The first prime is " (array-get primes 0))
(print "The last prime is " (array-get primes -1))


(def (factorial n)
    (if (<= n 0)
        1
        (* n (factorial (- n 1)))
    )
)

(def n 10)
(print "Factorial of " n " is " (factorial n))
(print n " is " (if (= (% n 2) 0) "even" "odd"))

(def (fibonacci n)
    (cond
        ((= n 0)
            0
        )
        ((= n 1)
            1
        )
        (else
            (+ (fibonacci (- n 1))
               (fibonacci (- n 2))
            )
        )
    )
)

(for i (range 10 0)
    (print "Fibonacci(" i ") = " (fibonacci i))
)


(def (how-many-days-have? month)
    (case month
        (("January" "March" "May" "July" "August" "October" "December")
            31
        )
        (("March" "Abril" "June" "September" "November")
            30
        )
        (("February")
            28
        )
        (else
            "No such month"
        )
    )
)

(def month-I-was-born "December")

(print month-I-was-born " has " (how-many-days-have? month-I-was-born) " days")


(quit)

