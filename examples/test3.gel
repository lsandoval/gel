
(def S (array -6 77 0.0 30.6 -15))


(apply or S)

(apply and S)


(def (negative-of n)
    (- 0 n)
)

(map negative-of S)


(def (is-positive n)
    (> n 0)
)

(filter is-positive S)


(def values (array 4.5 2))
(def operators (array + - * /))

(def (apply-oper oper)
    (apply oper values)
)

(map apply-oper operators)


(def (multiply-by factor)
    (=> (n) (* n factor) )
)

(def A (range 1 4))
(def B (map (multiply-by 10) A))
(def C (map (multiply-by 10) B))

(def (sum-of values)
    (apply + values)
)

(map sum-of (zip A B C))


(quit)

