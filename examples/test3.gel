
(define S (array -6 77 0.0 30.6 -15))


(apply or S)

(apply and S)


(define (negative-of n)
    (sub 0 n)
)

(map negative-of S)


(define (is-positive n)
    (> n 0)
)

(filter is-positive S)


(sort S)
S
(== S (array -15 -6 0.0 30.6 77))


(define values (array 4.5 2))
(define operators (array + - * /))

(define (apply-oper oper)
    (apply oper values)
)

(map apply-oper operators)


(define (multiply-by factor)
    (lambda (n) (* n factor) )
)

/*
(define A (range 1 4))
(define B (map (multiply-by 10) A))
(define C (map (multiply-by 10) B))

(define (sum-of values)
    (apply + values)
)

(map sum-of (zip A B C))
*/

(quit)

