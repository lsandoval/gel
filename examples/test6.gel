
(def fundamentals
    {
        "e" 2.718281828459045
        "pi" 3.141592653589793
        "c" 299792458
    }
)

(print fundamentals)

(size fundamentals)

(set fundamentals "g" 9.822)

(print fundamentals)

(remove fundamentals "c")

(get fundamentals "pi")

(keys fundamentals)

(defn values (h)
    (map
        (fn (k)
            (get h k)
        )
        (keys h)
    )
)

(values fundamentals)


(def roman-keys ["M" "CM" "D" "CD" "C" "XC" "L" "XL" "X" "IX" "V" "IV" "I"])
(def roman-values [1000 900 500 400 100 90 50 40 10 9 5 4 1])
(def romans (apply hash (apply + (map array roman-values roman-keys))))

(apply +
    (map
        (fn (i)
            (get romans i)
        )
        [1000 900 50 10 10 5 1 1]
    )
)


(defn Person (name age)
    (def self {})
    (append self
        "name" name
        "age" age
        "greet"
            (fn (name-of-person)
                (print "Nice to meet you" name-of-person)
                (print "I am" (get self "name"))
            )
        "set"
            (fn (attr value)
                (case attr
                    ("age")
                        (do
                            (set self "age" value)
                            (print "Now I am" value "years old")
                        )
                    #else
                        (print "I don't think you can change my" attr)
                )
            )
    )
    (fn (s)
        (get self s)
    )
)

(def mary (Person "Maria Romanov" 35))

(print "My name is" (mary "name") "and I'm" (mary "age"))
( (mary "greet") "Hanna")

( (mary "set") "age" 37)
(mary "age")

( (mary "set") "name" "Boris")

